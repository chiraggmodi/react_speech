[{"C:\\DATA\\WORK\\react_dictionary\\src\\App.js":"1","C:\\DATA\\WORK\\react_dictionary\\src\\reportWebVitals.js":"2","C:\\DATA\\WORK\\react_dictionary\\src\\Components\\Dictionary\\index.js":"3","C:\\DATA\\WORK\\react_dictionary\\src\\index.js":"4"},{"size":1817,"mtime":1610642161964,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1610466604639,"results":"7","hashOfConfig":"6"},{"size":4755,"mtime":1610640669663,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1610466604639,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1bbbcme",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"C:\\DATA\\WORK\\react_dictionary\\src\\App.js",["20"],"C:\\DATA\\WORK\\react_dictionary\\src\\reportWebVitals.js",[],"C:\\DATA\\WORK\\react_dictionary\\src\\Components\\Dictionary\\index.js",["21"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class Dictionary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dictionary: [],\r\n            searchkeyword: \"\"\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        if (this.props.searchTerm !== prevProps.searchTerm) {\r\n            axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${this.props.searchTerm}`).then(result => {\r\n\r\n                this.setState({\r\n                    dictionary: result.data,\r\n                    searchTerm: this.props.searchTerm\r\n                })\r\n            }).catch(err => {\r\n\r\n                if (err.response.status === 404) {\r\n                    this.setState({\r\n                        dictionary: false,\r\n                        searchTerm: this.props.searchTerm\r\n                    })\r\n                }\r\n            })\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.dictionary) {\r\n            return (\r\n                <div className=\"searchResult\">\r\n                    <h2 className=\"hwg\"><span className=\"hw\" data-headword-id={this.state.searchTerm}>{this.state.searchTerm}</span></h2>\r\n\r\n                    <div className=\"hwg\">\r\n                        <div className=\"entryGroup\">\r\n                            <h3 className=\"pronunciations\">No Result Found. Click on Button again to search another word.</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <>\r\n                    {this.state.dictionary.map((result, index) => (\r\n\r\n                        <div className=\"searchResult\" key={index}>\r\n                            <h2 className=\"hwg\"><span className=\"hw\" data-headword-id={result.word}>{result.word}</span></h2>\r\n\r\n                            <div className=\"hwg\">\r\n                                <div className=\"entryGroup\">\r\n                                    <h3 className=\"pronunciations\">Pronunciation\r\n                                    {result.phonetics.map((phonetic, inde) => {\r\n                                        let audio = new Audio(phonetic.audio);\r\n                                        const start = () => {\r\n                                            audio.play()\r\n                                        }\r\n                                        return (\r\n                                            <div className=\"phoneticPronu\" key={inde}>\r\n                                                <span className=\"phoneticspelling\">{phonetic.text}</span>\r\n                                                <a className=\"speaker\" onClick={start}><audio src={phonetic.audio} preload=\"none\"></audio></a>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                    </h3>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {result.meanings.map((meaning, index) => (\r\n                                <section className=\"gramb\" key={index}>\r\n                                    <h3 className=\"ps pos\">\r\n                                        <span className=\"pos\">{meaning.partOfSpeech}</span>\r\n                                    </h3>\r\n                                    <span className=\"transitivity\"></span>\r\n                                    <ul className=\"semb\">\r\n                                        {meaning.definitions.map((defination, index) => (\r\n                                            <li key={index}>\r\n                                                <div className=\"trg\">\r\n                                                    <p>\r\n                                                        <span className=\"ind\">{defination.definition}</span>\r\n                                                    </p>\r\n                                                    <span className=\"indicators\"></span>\r\n                                                    <div className=\"exg\">\r\n                                                        <div className=\"ex\"><em>{defination.example}</em></div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </section>\r\n                            ))}\r\n\r\n                        </div>\r\n                    ))}\r\n                </>\r\n            )\r\n        }\r\n\r\n    }\r\n}","C:\\DATA\\WORK\\react_dictionary\\src\\index.js",[],["22","23"],{"ruleId":"24","severity":1,"message":"25","line":22,"column":6,"nodeType":"26","endLine":22,"endColumn":19,"suggestions":"27"},{"ruleId":"28","severity":1,"message":"29","line":74,"column":49,"nodeType":"30","endLine":74,"endColumn":88},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleListen'. Either include it or remove the dependency array.","ArrayExpression",["35"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["36"],"no-negated-in-lhs",["37"],{"desc":"38","fix":"39"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [handleListen, isListening]",{"range":"40","text":"41"},[515,528],"[handleListen, isListening]"]